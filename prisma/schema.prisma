datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model EvidenceBucket {
  id    Int @id @default(autoincrement())
  count Int @default(0)

  rootId Int      @unique
  root   Evidence @relation("root", fields: [rootId], references: [id])

  evidence Evidence[] @relation("evidence")
}

model Evidence {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gid       String   @unique

  tag      String
  cite     String?
  fullcite String?
  summary  String?
  spoken   String?
  fulltext String?
  markup   String
  pocket   String?
  hat      String?
  block    String?

  file   File? @relation(fields: [fileId], references: [id])
  fileId Int?

  bucket   EvidenceBucket? @relation("evidence", fields: [bucketId], references: [id])
  bucketId Int?

  root EvidenceBucket? @relation("root")

  @@index([fileId])
  @@index([bucketId])
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gid       String   @unique

  name   String
  path   String
  status FileStatus @default(PENDING)

  round   Round? @relation(fields: [roundId], references: [id])
  roundId Int?   @unique

  evidence Evidence[]
  tags     Tag[]

  @@index([roundId])
}

enum FileStatus {
  PENDING
  PROCESSING
  PROCESSED
  ERROR
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String @unique
  label String

  files File[]
}

model Caselist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  caselistId  Int     @unique
  name        String  @unique
  displayName String
  year        Int
  event       String
  level       String
  teamSize    Int
  archived    Boolean
  archiveUrl  String?

  schools School[]
}

model School {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolId    Int     @unique
  name        String
  displayName String
  state       String?
  chapterId   Int?
  archived    Boolean

  caselist   Caselist @relation(fields: [caselistId], references: [caselistId])
  caselistId Int

  teams Team[]

  @@unique([name, caselistId])
  @@index([caselistId])
}

model Team {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamId            Int     @unique
  name              String
  displayName       String
  notes             String?
  debater1First     String
  debater1Last      String
  debater1StudentId Int?
  debater2First     String?
  debater2Last      String?
  debater2StudentId Int?
  debater3First     String?
  debater3Last      String?
  debater3StudentId Int?
  debater4First     String?
  debater4Last      String?
  debater4StudentId Int?
  archived          Boolean

  school   School @relation(fields: [schoolId], references: [schoolId])
  schoolId Int

  rounds Round[]

  @@unique([name, schoolId])
  @@index([teamId])
}

model Round {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roundId        Int     @unique
  side           String
  tournament     String
  round          String
  opponent       String?
  judge          String?
  report         String?
  opensourcePath String?
  opensource     File?
  video          String?
  tournId        Int?
  externalId     Int?

  team   Team   @relation(fields: [teamId], references: [teamId])
  teamId Int
  cites  Cite[]

  @@index([teamId])
}

model Cite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  citeId Int    @unique
  title  String
  cites  String

  round   Round @relation(fields: [roundId], references: [roundId])
  roundId Int

  @@index([roundId])
}
